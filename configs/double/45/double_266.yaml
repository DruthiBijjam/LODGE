NAME: Double266_0103Night_Norm_128len_266_diff_bc768 # Experiment name
ACCELERATOR: 'gpu' # Devices optioncal: “cpu”, “gpu”, “tpu”, “ipu”, “hpu”, “mps, “auto”
DEVICE: [2,3,4]   #,  #  # Index of gpus eg. [0] or [0,1,2,3]

# FOLDER: ./experiments
SEED_VALUE: 1234
Norm: True
DEBUG: False
TRAIN:
  STAGE: diffusion    # diffusion
  SPLIT: 'train'
  NUM_WORKERS: 16 # Number of workers
  BATCH_SIZE: 768 # Size of batches
  START_EPOCH: 1 # Start epoch
  END_EPOCH: 5001 # End epoch
  RESUME: ''
  PRETRAINED_VAE: ''
  PRETRAINED: '' 
  DATASETS: ['DoubleDance_266'] # Training datasets

  # OPTIM:
  #   TYPE: 'AdamW' # Optimizer type
  #   LR: 1e-4 # Learning rate
  OPTIM:
    TYPE: 'Adan' # Optimizer type
    LR: 4e-4 # Learning rate

  ABLATION:
    VAE_TYPE: 'no' # vae ablation: actor or mcross
    VAE_ARCH: 'encoder_decoder' # mdiffusion vae architecture
    PE_TYPE: 'actor' # mdiffusion mld or actor
    DIFF_PE_TYPE: 'actor' # mdiffusion mld or actor
    SKIP_CONNECT: False # skip connection for denoiser va
    # use linear to expand mean and std rather expand token nums
    MLP_DIST: False
    IS_DIST: False # Mcross distribution kl
    PREDICT_EPSILON: False # noise or motion

EVAL:
  SPLIT: 'gtest'
  BATCH_SIZE: 256 # Evaluating Batch size
  NUM_WORKERS: 16 # Evaluating Batch size

TEST:
  TEST_DIR: ''
  CHECKPOINTS:  # experiments/DanceDiffuse_module/debug--0517_noNorm_512len_315_diff_bc256/checkpoints/epoch=716.ckpt # experiments/DanceDiffuse_module/debug--0517_noNorm_512len_315_vae/checkpoints/epoch=140.ckpt # Pretrained model path
  SPLIT: 'gtest'
  BATCH_SIZE: 1 # Testing Batch size
  NUM_WORKERS: 12 # Evaluating Batch size
  SAVE_PREDICTIONS: True # Weather to save predictions
  COUNT_TIME: False # Weather to count time during test
  REPLICATION_TIMES: 2 # Number of times to replicate the test
  MM_NUM_SAMPLES: 100 # Number of samples for multimodal test
  MM_NUM_REPEATS: 30 # Number of repeats for multimodal test
  MM_NUM_TIMES: 10 # Number of times to repeat the multimodal test
  DIVERSITY_TIMES: 300 # Number of times to repeat the diversity test
  REP_I: 0
  DATASETS: ['DoubleDance_266']

model:
  target: 'modules'
  vae_type: 'no'
  
  vae: true # whether vae model
  model_type: Edge_Module # model type
  condition: 'music'
  latent_dim: [1, 256]  #[512, 135]    # [${FINEDANCE.full_seq_len}, ${DATASET.NFEATS}]      #  # latent dimension
  ff_size: 1024 #
  num_layers: 9 # number of layers
  num_head: 4 # number of head layers
  droupout: 0.1 # dropout rate
  activation: gelu # activation type
  guidance_scale: 7.5   # 7.5 #
  guidance_uncondp: 0.1 # 0.1 0.25

  denoiser:
    target: dld.models.architectures.dld_denoiser.DldDenoiser
    params:
      music_encoded_dim: ${model.DanceDecoder.cond_feature_dim}
      ff_size: 1024
      num_layers: 9
      num_heads: 4
      dropout: 0.1
      normalize_before: False
      activation: 'gelu'
      flip_sin_to_cos: True
      return_intermediate_dec: False
      position_embedding: 'learned'
      arch: trans_enc
      freq_shift: 0
      condition: ${model.condition}
      latent_dim: ${model.latent_dim}
      guidance_scale: ${model.guidance_scale}
      guidance_uncondp: ${model.guidance_uncondp}
      nfeats: ${DATASET.NFEATS}
      ablation: ${TRAIN.ABLATION}

  edge_diffusion:   
    target: dld.models.architectures.edge_diffusion.GaussianDiffusion
    params:
      horizon: ${FINEDANCE.full_seq_len}
      repr_dim: ${FINEDANCE.nfeats}
      schedule: "cosine"
      n_timestep: 1000
      predict_epsilon: False
      loss_type: "l2"
      use_p2: False
      cond_drop_prob: 0.25
      guidance_weight: 2
 

  DanceDecoder:   
    target: dld.models.architectures.edge_model.DanceDecoder
    params:
      nfeats: ${FINEDANCE.nfeats}
      seq_len: ${FINEDANCE.full_seq_len}
      latent_dim: 600
      ff_size: 1024
      num_layers: 8
      num_heads: 8
      dropout: 0.1
      cond_feature_dim: 35
      activation: gelu

  # normalizer:
  #   target: dld.data.utils.preprocess.Normalizer
  #   params:
  #     data: /home/data/lrh/datasets/fine_dance/origin/normalizer_motion_feature319_0519.pkl


  motion_vae:
    target: dld.models.architectures.autoencoder.DanceAE
    params:
      nfeats: ${DATASET.NFEATS}
      scale: 4
      MotionDecoder:
        target: dld.models.architectures.autoencoder.MotionDecoderMix4
        params:
          nfeats: ${DATASET.NFEATS}
          seq_len: ${FINEDANCE.full_seq_len}
          latent_dim: 512
          ff_size: 1024
          num_layers: 8
          num_heads: 8
          dropout: 0.1
          cond_feature_dim: ${model.DanceDecoder.cond_feature_dim}
          activation: "gelu"
      
  
  scheduler:
    target: diffusers.DDIMScheduler
    num_inference_timesteps: 50
    eta: 0.0
    params:
      num_train_timesteps: 1000
      beta_start: 0.00085
      beta_end: 0.012
      beta_schedule: 'scaled_linear' # Optional: ['linear', 'scaled_linear', 'squaredcos_cap_v2']
      # variance_type: 'fixed_small'
      clip_sample: false # clip sample to -1~1
      # below are for ddim
      set_alpha_to_one: false
      steps_offset: 1

  noise_scheduler:
    target: diffusers.DDPMScheduler
    params:
      num_train_timesteps: 1000
      beta_start: 0.00085
      beta_end: 0.012
      beta_schedule: 'scaled_linear' # Optional: ['linear', 'scaled_linear', 'squaredcos_cap_v2']
      variance_type: 'fixed_small'
      clip_sample: false # clip sample to -1~1
      # below are for ddim
      # set_alpha_to_one: false
      # steps_offset: 1

        

LOSS:
  TYPE: loss_266_double # Losses type
  LAMBDA_ROOT_Global: 1.0
  LAMBDA_ROOT_V: 7.0
  LAMBDA_ROOT_R: 7.0
  LAMBDA_LOSS: 5.0 # Lambda for reconstruction losses
  LAMBDA_V: 2.5
  DIST_SYNC_ON_STEP: True # Sync Losses on step when distributed trained
METRIC:
  FORCE_IN_METER: True
  DIST_SYNC_ON_STEP: True  # # Sync Losses on step when distributed trained
  TYPE: ['DanceDiffuse_Metric']  # DanceAE_Metric
LOGGER:
  SACE_CHECKPOINT_EPOCH: 100      # 保存间隔
  LOG_EVERY_STEPS: 50
  VAL_EVERY_STEPS: 50
  TENSORBOARD: true
  WANDB:
    OFFLINE: false
    PROJECT: null
    RESUME_ID: null
RENDER:
  JOINT_TYPE: mmm
  INPUT_MODE: npy
  DIR: ''
  NPY: ''
  DENOISING: true
  OLDRENDER: true
  RES: high
  DOWNSAMPLE: true
  FPS: 12.5
  CANONICALIZE: true
  EXACT_FRAME: 0.5
  NUM: 7
  MODE: sequence
  VID_EXT: mp4
  ALWAYS_ON_FLOOR: false
  GT: false
DEMO:
  MOTION_TRANSFER: false
  RENDER: false
  FRAME_RATE: 12.5
  EXAMPLE: null

FINEDANCE:
  mix: False           # 是否做混合的数据增强
  full_seq_len: 128   # 150
  windows: 4  # 16   #40   #
  is_mirror: False    # 是否做镜像的数据增强
  nfeats: 532
  njoints: 22   
  mode: double  # "single" , "double_react", "double"
